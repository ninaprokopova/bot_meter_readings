package bot

import (
	"context"
	"errors"
	"submit_meter_readings/bot/mocks"
	"testing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/stretchr/testify/mock"
)

func TestHandleMessage_NonCommand(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo:   userRepo,
		sender:     sender,
		userStates: make(map[int64]*UserState),
	}

	msg := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: 123},
		From: &tgbotapi.User{ID: 456},
		Text: "–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç",
	}

	bot.userStates[456] = &UserState{}
	sender.On("SendMessage", mock.Anything).Return()

	bot.handleMessage(ctx, msg)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StartCommand_Success(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/start",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 6}},
	}

	userRepo.On("Subscribe", ctx, int64(456)).Return(nil)

	expectedMsg := tgbotapi.NewMessage(123, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å c 12:00 –ø–æ 15:00 —Å 20 –ø–æ 25 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StartCommand_DBError(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/start",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 6}},
	}

	expectedErr := errors.New("database error")
	userRepo.On("Subscribe", ctx, int64(456)).Return(expectedErr)

	expectedMsg := tgbotapi.NewMessage(123, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StatusCommand_SubscribeNotSubmitted(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/status",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 7}},
	}

	userRepo.On("GetUserStatus", mock.Anything, int64(456)).Return(true, false, nil)

	expectedMsg := tgbotapi.NewMessage(123, "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StatusCommand_SubscribeSubmitted(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/status",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 7}},
	}

	userRepo.On("GetUserStatus", mock.Anything, int64(456)).Return(true, true, nil)

	expectedMsg := tgbotapi.NewMessage(123, "‚úÖ –í—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StatusCommand_NotSubscribe(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/status",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 7}},
	}

	userRepo.On("GetUserStatus", mock.Anything, int64(456)).Return(false, false, nil)

	expectedMsg := tgbotapi.NewMessage(123, "üîï –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

func TestHandleMessage_StatusCommand_DBError(t *testing.T) {
	ctx := context.Background()
	userRepo := new(mocks.MockUserRepo)
	sender := new(mocks.MockMessageSender)

	bot := &Bot{
		userRepo: userRepo,
		sender:   sender,
	}

	msg := &tgbotapi.Message{
		Chat:     &tgbotapi.Chat{ID: 123},
		From:     &tgbotapi.User{ID: 456},
		Text:     "/status",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 7}},
	}

	expectedErr := errors.New("database error")
	userRepo.On("GetUserStatus", ctx, int64(456)).Return(true, true, expectedErr)

	expectedMsg := tgbotapi.NewMessage(123, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
	sender.On("SendMessage", expectedMsg).Return()

	bot.handleMessage(ctx, msg)

	userRepo.AssertExpectations(t)
	sender.AssertExpectations(t)
}

package bot

import (
	"context"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞–∑–∞–Ω–∏–π) –∏ —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
func (b *Bot) handleMessage(ctx context.Context, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	userID := msg.From.ID
	if !msg.IsCommand() {
		state, ok := b.userStates[userID]
		if ok {
			b.handleMeterReadingInput(ctx, msg, state)
		}
		return
	}

	switch msg.Command() {
	case "start":
		b.handleStartCommand(ctx, chatID, userID)
	case "status":
		b.handleStatusCommand(ctx, chatID, userID)
	}
}

func (b *Bot) handleStartCommand(ctx context.Context, chatID, userID int64) {
	err := b.userRepo.Subscribe(ctx, userID)
	if err != nil {
		log.Printf("Subscribe error: %v", err)
		msgError := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.sender.SendMessage(msgError)
		return
	}

	reply := tgbotapi.NewMessage(chatID, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å c 12:00 –ø–æ 15:00 —Å 20 –ø–æ 25 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.")
	b.sender.SendMessage(reply)
}

func (b *Bot) handleStatusCommand(ctx context.Context, chatID, userID int64) {
	isSubscribed, hasSubmitted, err := b.userRepo.GetUserStatus(ctx, userID)
	if err != nil {
		log.Printf("Status check error: %v", err)
		msgError := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
		b.sender.SendMessage(msgError)
		return
	}

	var statusText string
	if !isSubscribed {
		statusText = "üîï –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
	} else {
		if hasSubmitted {
			statusText = "‚úÖ –í—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
		} else {
			statusText = "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
		}
	}
	msgStatus := tgbotapi.NewMessage(chatID, statusText)
	b.sender.SendMessage(msgStatus)
}
